name: CMake

on: [push]

jobs:
  build:
    name: ${{ matrix.settings.name }} ${{ matrix.configuration }}
    runs-on: ${{ matrix.settings.os }}
    strategy:
      matrix:
        configuration: [ "Release", "Debug" ]
        settings:
          - {
              name: "Ubuntu GCC-11",
              os: ubuntu-20.04,
              compiler: { type: GCC, version: 11, conan: "gcc", cc: "gcc-11", cxx: "g++-11", std: 20 },
              lib: "libstdc++11"
            }
          - {
              name: "Ubuntu Clang-14 + libc++",
              os: ubuntu-20.04,
              compiler:
                {
                  type: CLANG,
                  version: 14,
                  conan: "clang", 
                  cc: "clang-14",
                  cxx: "clang++-14",
                  std: 20,
                  toolchain: "clang-libstdc++11.cmake"
                },
              lib: "libc++",
            }
          - {
              name: "Visual Studio 2019",
              os: windows-latest,
              compiler: { type: VISUAL, version: 16, cc: "cl", cxx: "cl", std: 20 },
            }
          - {
              name: "MacOS Apple Clang 13",
              os: macos-latest,
              compiler:
                {
                  type: APPLE_CLANG,
                  version: "13.0",
                  conan: "apple-clang",
                  cc: "clang",
                  cxx: "clang++",
                  std: 20
                },
              lib: "libc++",
            }
    steps:
      - uses: actions/checkout@v2
      - name: Add msbuild to PATH
        if: matrix.settings.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.0.2
        with:
          vs-version: "16.5"
      - name: Install Latest GCC 
        if: matrix.settings.compiler.type == 'GCC'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.settings.compiler.version }}
          platform: x64
      - name: Install Latest libstdC++11
        if: matrix.settings.compiler.type == 'CLANG' && matrix.settings.lib == 'libstdc++11'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64
      - name: Install Clang
        if: matrix.settings.compiler.type == 'CLANG'
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.settings.compiler.version }}
          platform: x64
      - name: Install Libc++
        if: matrix.settings.compiler.type == 'CLANG' && matrix.settings.lib == 'libc++'
        shell: bash
        run: |
          sudo apt install -y libc++-${{ matrix.settings.compiler.version }}-dev libc++abi-${{ matrix.settings.compiler.version }}-dev libunwind-${{ matrix.settings.compiler.version }}-dev
      - name: Select Xcode ${{matrix.settings.compiler.version}}
        if: matrix.settings.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '${{matrix.settings.compiler.version}}'
      - name: Install Linux System Packages
        if: matrix.settings.os == 'ubuntu-20.04'
        run: |
          sudo apt-get -y install libgl-dev
          sudo apt-get -y install libopengl-dev
          sudo apt-get -y install libglu1-mesa-dev
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Conan Package Tools
        run: |
          pip install -U conan
      - name: Configure Conan
        shell: bash
        run: |
          conan config init
          conan profile update settings.compiler.cppstd=${{ matrix.settings.compiler.std }} default
          if [[ "${{ matrix.settings.compiler.type }}" == "GCC" || "${{ matrix.settings.compiler.type }}" == "CLANG" ]]; then
            conan profile update settings.compiler=${{ matrix.settings.compiler.conan }} default
            conan profile update settings.compiler.version=${{ matrix.settings.compiler.version }} default
            conan profile update settings.compiler.libcxx=${{ matrix.settings.lib }} default
          fi
          conan profile show default
      - name: Configure Install
        shell: bash
        run: |
          conan install . --build missing

      - name: Discover Toolchain
        if: contains( "${{matrix.settings.compiler}}", "toolchain" )
        shell: bash
        run: |
          echo "{toolchain}={-DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/${{ matrix.settings.compiler.toolchain }}}" >> $GITHUB_ENV

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} ${{ env.toolchain }}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build "${{github.workspace}}/build" --config ${{ matrix.configuration }}
