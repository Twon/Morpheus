name: CMake

on: [push]

jobs:
  build:
    name: ${{ matrix.settings.name }} ${{ matrix.configuration }}
    runs-on: ${{ matrix.settings.os }}
    strategy:
      matrix:
        configuration: [ "Release", "Debug" ]
        settings:
          - {
              name: "Ubuntu GCC-12",
              os: ubuntu-latest,
              compiler: { type: GCC, version: 12, conan: "gcc", cc: "gcc-12", cxx: "g++-12", std: 20 },
              lib: "libstdc++11"
            }
          - {
              name: "Ubuntu Clang-14 + libc++",
              os: ubuntu-latest,
              compiler:
                {
                  type: CLANG,
                  version: 14,
                  conan: "clang", 
                  cc: "clang-14",
                  cxx: "clang++-14",
                  std: 20,
                  toolchain: "clang-libc++.cmake"
                },
              lib: "libc++",
            }
          - {
              name: "Visual Studio 2019",
              os: windows-latest,
              compiler: { type: VISUAL, version: 16, conan: "mscv", cc: "cl", cxx: "cl", std: 20 },
            }
          - {
              name: "MacOS Apple Clang 14",
              os: macos-12,
              compiler:
                {
                  type: APPLE_CLANG,
                  version: "14.0",
                  conan: "apple-clang",
                  cc: "clang",
                  cxx: "clang++",
                  std: 20
                },
              lib: "libc++",
            }
    steps:
      - uses: actions/checkout@v2
      
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Cache Conan data
        uses: actions/cache@v3
        env:
          cache-name: cache-conan-data
        with:
          path: ${{github.workspace}}/.conan2/p
          key: build-${{ matrix.settings.os }}-${{ matrix.configuration }}-${{ matrix.settings.compiler.conan }}-${{ matrix.settings.compiler.version }}-${{ matrix.settings.lib }}
          restore-keys: |
            build-${{ matrix.settings.os }}-${{ matrix.configuration }}-${{ matrix.settings.compiler.conan }}-${{ matrix.settings.compiler.version }}-
            build-${{ matrix.settings.os }}-${{ matrix.configuration }}-${{ matrix.settings.compiler.conan }}-
            build-${{ matrix.settings.os }}-${{ matrix.configuration }}-
            build-${{ matrix.settings.os }}-

#      - uses: lhotari/action-upterm@v1
#        with:
#          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
#          limit-access-to-actor: true
          ## limits ssh access and adds the ssh public keys of the listed GitHub users
#          limit-access-to-users: twon

      - name: Add msbuild to PATH
        if: matrix.settings.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.3
        with:
          vs-version: "16.5"
      - name: Install Latest GCC 
        if: matrix.settings.compiler.type == 'GCC'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.settings.compiler.version }}
          platform: x64
      - name: Install Latest libstdC++11
        if: matrix.settings.compiler.type == 'CLANG' && matrix.settings.lib == 'libstdc++11'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 12
          platform: x64
      - name: Install Clang
        if: matrix.settings.compiler.type == 'CLANG'
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.settings.compiler.version }}
          platform: x64
      - name: Install Libc++
        if: matrix.settings.compiler.type == 'CLANG' && matrix.settings.lib == 'libc++'
        shell: bash
        run: |
          sudo apt install -y libc++-${{ matrix.settings.compiler.version }}-dev libc++abi-${{ matrix.settings.compiler.version }}-dev libunwind-${{ matrix.settings.compiler.version }}-dev
      - name: Select Xcode ${{matrix.settings.compiler.version}}
        if: matrix.settings.os == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '${{matrix.settings.compiler.version}}'
      - name: Install Linux System Packages
        if: contains( matrix.settings.os, 'ubuntu')
        run: |
          sudo apt-get -y install libgl-dev
          sudo apt-get -y install libopengl-dev
          sudo apt-get -y install libglu1-mesa-dev
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install Conan Package Tools
        run: |
          pip install -U conan
      
      - name: Select Profile
        shell: bash
        run: |
          CONAN_PROFILE=${{matrix.setting.compiler.conan}}/

      - name: Configure Conan
        shell: bash
        run: |
          conan profile detect --force
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^build_type=.*/build_type=${{ matrix.configuration }}/' .conan2/profiles/default
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.cppstd=.*/compiler.cppstd=${{ matrix.settings.compiler.std }}/' .conan2/profiles/default
          if [[ "${{ matrix.settings.compiler.type }}" == "GCC" || "${{ matrix.settings.compiler.type }}" == "CLANG" ]]; then
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler=.*/compiler=${{ matrix.settings.compiler.conan }}/' .conan2/profiles/default
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.version=.*/compiler.version=${{ matrix.settings.compiler.version }}/' .conan2/profiles/default
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.libcxx=.*/compiler.libcxx=${{ matrix.settings.lib }}/' .conan2/profiles/default
          fi
 
          echo "[buildenv]\n" >> .conan2/profiles/default
          echo "CMAKE_MAKE_PROGRAM=Ninja\n" >> .conan2/profiles/default
          echo "[conf]\n" >> .conan2/profiles/default
          echo "tools.cmake.cmaketoolchain:generator=Ninja" >> .conan2/profiles/default

          conan profile show -pr default
#          conan profile detect
#          conan config install ..\.conan\
#          conan profile show -pr default

#      - name: Make build directory
#        working-directory: ${{github.workspace}}
#        shell: bash
#        run: |
#          mkdir build

#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        timeout-minutes: 15
#        with:
#          detached: true
      - name: Configure Install
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          conan install "${{github.workspace}}" --build missing -pr:b default -c tools.cmake.cmaketoolchain:generator="Ninja Multi-Config" --build catch2/3.3.2

      - name: Configure Conan Build
        if: matrix.settings.os == 'windows-latest'
        shell: cmd
        working-directory: ${{github.workspace}}
        run: |
           call build\generators\conanvcvars.bat
           call build\generators\conanbuild.bat

      - name: Configure Conan Build
        if: matrix.settings.os != 'windows-latest'
        shell: bash
        working-directory: ${{github.workspace}}
        run: |
           source build/generators/conanbuild.sh

      - name: Discover Toolchain
        shell: bash
        run: |
          if [ -z "${{matrix.settings.compiler.toolchain}}" ]
          then
              echo "No toolchain specified"
          else
              echo "toolchain=-DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/cmake/toolchains/${{ matrix.settings.compiler.toolchain }}" >> $GITHUB_ENV
          fi

#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v3
#        timeout-minutes: 15
#        with:
#          detached: true

      - name: Configure CMake
        if: matrix.settings.os == 'windows-latest'
        shell: cmd
        # Build your program with the given configuration
        run: |
          cmake --version 
          call build\generators\conanbuild.bat
          cmake --preset conan-default -DENABLE_ADDRESS_SANITIZER=ON -DENABLE_UNDEFINED_BEHAVIOUR_SANITIZER=ON

      - name: Configure CMake
        if: matrix.settings.os != 'windows-latest'
        shell: bash
        # Build your program with the given configuration
        run: cmake --preset conan-default -DENABLE_ADDRESS_SANITIZER=ON -DENABLE_UNDEFINED_BEHAVIOUR_SANITIZER=ON

      - name: Build
        if: matrix.settings.os == 'windows-latest'
        shell: cmd
        # Build your program with the given configuration
        run: |
          call build\generators\conanbuild.bat
          cmake --build --preset conan-default
  
      - name: Build
        if: matrix.settings.os != 'windows-latest'
        shell: bash
        run: |
          cmake --build --preset conan-default