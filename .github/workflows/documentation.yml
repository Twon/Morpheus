name: Documentation
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  COMPILER_TYPE: gcc
  COMPILER_VERSION: 12
  STDLIB: libstdc++11

jobs:
  documentation:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "ubuntu-latest" ]

    steps:
      - uses: actions/checkout@v2

      - name: Cache Conan data
        uses: actions/cache@v3
        env:
          cache-name: cache-conan-data
        with:
          path: ~/.conan/data
          key: ${{ hashFiles('**/conanfile.py') }}-build-${{ matrix.settings.os }}-${{ matrix.configuration }}-${{ matrix.settings.compiler.conan }}-${{ matrix.settings.compiler.version }}-${{ matrix.settings.lib }}
          restore-keys: |
            ${{ hashFiles('**/conanfile.py') }}-build-${{ matrix.settings.os }}-${{ matrix.configuration }}-${{ matrix.settings.compiler.conan }}-${{ matrix.settings.compiler.version }}-
            ${{ hashFiles('**/conanfile.py') }}-build-${{ matrix.settings.os }}-${{ matrix.configuration }}-${{ matrix.settings.compiler.conan }}-
            ${{ hashFiles('**/conanfile.py') }}-build-${{ matrix.settings.os }}-${{ matrix.configuration }}-
            ${{ hashFiles('**/conanfile.py') }}-build-${{ matrix.settings.os }}-

      - name: Install Latest GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ env.COMPILER_VERSION }}
          platform: x64 

      - name: Install Linux System Packages
        shell: bash
        run: |
          sudo apt-get -y install libgl-dev
          sudo apt-get -y install libopengl-dev
          sudo apt-get -y install libglu1-mesa-dev

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Conan Package Tools
        run: |
          pip install conan==1.59.0

      - name: Configure Conan
        shell: bash
        run: |
          conan config init
          conan profile update settings.compiler.cppstd=20 default
          conan profile update settings.build_type=${{ env.BUILD_TYPE }} default
          conan profile update settings.compiler=${{ env.COMPILER_TYPE }} default
          conan profile update settings.compiler.version=${{ env.COMPILER_VERSION }} default
          conan profile update settings.compiler.libcxx=${{ env.STDLIB }} default
          conan profile show default

      - name: Make build directory
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          mkdir build

      - name: Configure Install
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          conan install "${{github.workspace}}" --build missing -o build_docs=True

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          source ${{github.workspace}}/build/activate.sh
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DMORPHEUS_BUILD_DOCUMENTATION:BOOL=ON

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{ env.BUILD_TYPE }} --target Documentation

      - name: Deploy documentation
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/documentation/sphinx