name: Code Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  OS: ubuntu-latest
  BUILD_TYPE: Debug
  COMPILER_TYPE: gcc
  COMPILER_VERSION: 11
  STDLIB: libstdc++11
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ env.OS }} 
    steps:
      - uses: actions/checkout@v2

      - name: Cache Conan data
        uses: actions/cache@v3
        env:
          cache-name: cache-conan-data
        with:
          path: ~/.conan/data
          key: build-${{ matrix.os }}-$BUILD_TYPE-$COMPILER_TYPE-$COMPILER_VERSION-$STDLIB
          restore-keys: |
            build-${{ matrix.os }}-$BUILD_TYPE-$COMPILER_TYPE-$COMPILER_VERSION-
            build-${{ matrix.os }}-$BUILD_TYPE-$COMPILER_TYPE-
            build-${{ matrix.os }}-$BUILD_TYPE-
            build-${{ matrix.os }}-

      - name: Install Latest GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ env.COMPILER_VERSION }}
          platform: x64

      - name: Install Lcov
        shell: bash
        run: |
          wget https://github.com/linux-test-project/lcov/archive/refs/tags/v1.16.tar.gz
          tar -xvf v1.16.tar.gz
          cd lcov-1.16
          sudo make install

      - name: Install Linux System Packages
        shell: bash
        run: |
          sudo apt-get -y install libgl-dev
          sudo apt-get -y install libopengl-dev
          sudo apt-get -y install libglu1-mesa-dev

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Conan Package Tools
        run: |
          pip install -U conan

      - name: Configure Conan
        shell: bash
        run: |
          conan config init
          conan profile update settings.compiler.cppstd=20 default
          conan profile update settings.build_type=$BUILD_TYPE default
          conan profile update settings.compiler=gcc default
          conan profile update settings.compiler.version=$COMPILER_VERSION default
          conan profile update settings.compiler.libcxx=$STDLIB default
          conan profile show default

      - name: Make build directory
        working-directory: ${{github.workspace}}
        shell: bash
        run: |
          mkdir build

      - name: Configure Install
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          conan install "${{github.workspace}}" --build missing

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_CODE_COVERAGE=1

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config $BUILD_TYPE

#      - uses: lhotari/action-upterm@v1
#        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
#          limit-access-to-actor: true
          ## limits ssh access and adds the ssh public keys of the listed GitHub users
#          limit-access-to-users: twon

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE

      - name: Fastcov
        # Run Fastcov target to collect coverage information.
        run: cmake --build ${{github.workspace}}/build --config $BUILD_TYPE --target coverage

      - name: Lcov
        # Run LCov target to generate code coverage report
        run: cmake --build ${{github.workspace}}/build --config $BUILD_TYPE --target coverage-lcov

      - name: Cobertura
        # Run Cobertura target to generate code coverage report in XML
        run: cmake --build ${{github.workspace}}/build --config $BUILD_TYPE --target coverage-cobertura

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          working-directory: ${{github.workspace}}/build/coverage
          gcov: true
          gcov_include: ${{github.workspace}}/build/coverage/html
          files: ${{github.workspace}}/build/coverage/cobertura_coverage.xml