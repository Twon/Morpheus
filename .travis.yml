# Based on https://github.com/Microsoft/GSL/blob/master/.travis.yml
language: cpp
sudo: false
notifications:
  email: false

# Use Linux unless otherwise specified 
os: linux
dist: bionic
cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps

matrix:
  include:

    ##########################################################################
    # Clang on OSX
    # Travis seems to take longer to start OSX instances,
    # so leave this first for the overall build to be faster
    ##########################################################################

    # XCode 10.3
    - env: COMPILER=clang++ BUILD_TYPE=Debug COVERAGE=1
      os: osx
      osx_image: xcode10.3
      language: generic
      compiler: clang

    # XCode 11.1
    - env: COMPILER=clang++ BUILD_TYPE=Debug COVERAGE=1
      os: osx
      osx_image: xcode11.1
      language: generic
      compiler: clang

    ##########################################################################
    # Clang on Linux
    ##########################################################################

    # Clang 7.0
    - env: COMPILER=clang++-7 BUILD_TYPE=Debug COVERAGE=1
      language: python
      python: "3.7"
      addons: &clang70
        apt:
          packages:
            - clang-7
            - g++-7
            - libgl1-mesa-dev
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-bionic-7
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    # Clang 8.0
    - env: COMPILER=clang++-8 BUILD_TYPE=Debug COVERAGE=1
      language: python
      python: "3.7"
      addons: &clang80
        apt:
          packages:
            - clang-8
            - g++-7
            - libgl1-mesa-dev
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-bionic-8
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    ##########################################################################
    # GCC on Linux
    ##########################################################################

    # GCC 8
    - env: COMPILER=g++-8 BUILD_TYPE=Debug COVERAGE=1
      language: python
      python: "3.7"
      addons: &gcc8
        apt:
          packages:
            - g++-8
            - libgl1-mesa-dev
          sources:
            - ubuntu-toolchain-r-test

    # GCC 9
    - env: COMPILER=g++-9 BUILD_TYPE=Debug COVERAGE=1
      language: python
      python: "3.7"
      addons: &gcc9
        apt:
          packages:
            - g++-9
            - libgl1-mesa-dev
          sources:
            - sourceline: 'ppa:ubuntu-toolchain-r/test'

# Added following instructions from https://docs.travis-ci.com/user/installing-dependencies#Installing-Packages-with-the-APT-Addon
before_install:
    #  - |
    #if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
    #    sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
    #    sudo apt-get update -q
    #    sudo apt-get install gcc-9 -y
    #fi
  - ./.travis/before_install.sh
  
install:
  # Set the ${CXX} variable properly
  - export CXX=${COMPILER}
  - ${CXX} --version

  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - cd "${DEPS_DIR}"

  # Travis machines have 2 cores
  - JOBS=2

  ############################################################################
  # Install a recent CMake (unless already installed on OS X)
  ############################################################################
  - CMAKE_VERSION=3.15.4
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      which cmake || brew install cmake || brew upgrade cmake
    fi
  - cmake --version

  ############################################################################
  # [linux]: Install the right version of libc++
  ############################################################################
  - |
    LLVM_INSTALL=${DEPS_DIR}/llvm/install
    # if in linux and compiler clang and llvm not installed
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" && -n "$(ls -A ${LLVM_INSTALL})" ]]; then
      if   [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
      elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
      elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
      fi
      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)
      export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
      export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
    fi
 
  - pip install conan

before_script:
  # have CMake to generate build files
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build && cd build
  - conan install ../
  - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_CODE_COVERAGE=$COVERAGE

script:
  # build and run tests
  - cmake --build . -- -j${JOBS}
  - ctest --output-on-failure -j${JOBS}
  # Waiting for the following issue to be fixed before Mac OS X support can be enabled: https://github.com/RWTH-HPC/CMake-codecov/pull/15
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]] && [[ "${COVERAGE}" == "1" ]]; then
      cmake --build . --target gcov
      cmake --build . --target lcov
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports"
    fi
